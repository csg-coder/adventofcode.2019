using System;
using System.Linq;

namespace day_7
{
    class Program2
    {
        static void Main(string[] args)
        {
            var puzzle5 = new int[] { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1002, 43, 69, 224, 101, -483, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 5, 224, 1, 224, 223, 223, 1101, 67, 60, 225, 1102, 5, 59, 225, 1101, 7, 16, 225, 1102, 49, 72, 225, 101, 93, 39, 224, 101, -98, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 35, 82, 225, 2, 166, 36, 224, 101, -4260, 224, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 102, 66, 48, 224, 1001, 224, -4752, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1001, 73, 20, 224, 1001, 224, -55, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1102, 18, 41, 224, 1001, 224, -738, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 68, 71, 225, 1102, 5, 66, 225, 1101, 27, 5, 225, 1101, 54, 63, 224, 1001, 224, -117, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 170, 174, 224, 101, -71, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 344, 1001, 223, 1, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 434, 101, 1, 223, 223, 1008, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 464, 1001, 223, 1, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 479, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 509, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 1107, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 1108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 569, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 599, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 107, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 659, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226 };
            var puzzle7 = new int[] { 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 63, 88, 97, 118, 199, 280, 361, 442, 99999, 3, 9, 1002, 9, 3, 9, 101, 2, 9, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 102, 5, 9, 9, 101, 3, 9, 9, 1002, 9, 3, 9, 101, 3, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 1001, 9, 3, 9, 102, 3, 9, 9, 101, 2, 9, 9, 1002, 9, 4, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 102, 4, 9, 9, 101, 5, 9, 9, 102, 2, 9, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99 };
            var test7p2_1 = new int[] { 3, 26, 1001, 26, -4, 26, 3, 27, 1002, 27, 2, 27, 1, 27, 26, 27, 4, 27, 1001, 28, -1, 28, 1005, 28, 6, 99, 0, 0, 5 };
            var test7p2_2 = new int[] {3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,
-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,
53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10 };
            // var puzzle=new int[]{3,225,1,225,6,6,1100,1,238,225,104,0,1002,43,69,224,101,-483,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,67,60,225,1102,5,59,225,1101,7,16,225,1102,49,72,225,101,93,39,224,101,-98,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1102,35,82,225,2,166,36,224,101,-4260,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,102,66,48,224,1001,224,-4752,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,73,20,224,1001,224,-55,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1102,18,41,224,1001,224,-738,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1101,68,71,225,1102,5,66,225,1101,27,5,225,1101,54,63,224,1001,224,-117,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,170,174,224,101,-71,224,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,677,224,102,2,223,223,1006,224,344,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226};
            // Process(new int[]{1101,100,-1,4,09});
            // Process(new int[]{2,3,0,3,99});
            // Process(new int[]{2,4,4,5,99,0});
            // Process(new int[]{1,1,1,4,99,5,6,0,99});
            // Process(new int[]{1,9,10,3,2,3,11,0,99,30,40,50});
            // System.Console.WriteLine("less than 8");
            // Process(new int[]{3,9,7,9,10,9,4,9,99,-1,8});
            // System.Console.WriteLine("less than 8 immediate");
            // Process(new int[]{3,3,1107,-1,8,3,4,3,99});
            //  System.Console.WriteLine("equal 8 immediate");
            // Process(new int[]{3,3,1108,-1,8,3,4,3,99});           
            //  System.Console.WriteLine("jump tests position");
            // Process(new int[]{3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9}); 
            // System.Console.WriteLine("jump tests immediate");
            // Process(new int[]{3,3,1105,-1,9,1101,0,0,12,4,12,99,1}); 
            //             System.Console.WriteLine("larger (lt 8, eq 8, gt 8");
            //             Process(new int[]{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
            // 1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
            // 999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}); 
            //string max = "";
            double max = 0;
            for (int a = 5; a < 10; a++)
                for (int b = 5; b < 10; b++)
                    for (int c = 5; c < 10; c++)
                        for (int d = 5; d < 10; d++)
                            for (int e = 5; e < 10; e++)
                            {

                                //(a, b, c, d, e) = (9, 8, 7, 6, 5);
                                if (a != b && a != c && a != d && a != e
                                    && b != c && b != d && b != e
                                    && c != d && c != e
                                    && d != e)
                                {
                                    Console.WriteLine($"{a}{b}{c}{d}{e}");
                                }
                                else
                                {
                                    continue;
                                }

                                var puzzle = puzzle7;
                                var pos_a = 0;
                                var pos_b = 0;
                                var pos_c = 0;
                                var pos_d = 0;
                                var pos_e = 0;

                                var h_a = false;
                                var h_b = false;
                                var h_c = false;
                                var h_d = false;
                                var h_e = false;

                                var puzzle_a = puzzle.ToList<int>().ToArray();
                                var puzzle_b = puzzle.ToList<int>().ToArray();
                                var puzzle_c = puzzle.ToList<int>().ToArray();
                                var puzzle_d = puzzle.ToList<int>().ToArray();
                                var puzzle_e = puzzle.ToList<int>().ToArray();

                                //initial config
                                var next = "0";
                                next = Process(puzzle_a, a.ToString(), next, ref pos_a, ref h_a);
                                //Console.WriteLine($"next={next}");
                                next = Process(puzzle_b, b.ToString(), next, ref pos_b, ref h_b);
                                //Console.WriteLine($"next={next}");
                                next = Process(puzzle_c, c.ToString(), next, ref pos_c, ref h_c);
                                //Console.WriteLine($"next={next}");
                                next = Process(puzzle_d, d.ToString(), next, ref pos_d, ref h_d);
                                //Console.WriteLine($"next={next}");
                                next = Process(puzzle_e, e.ToString(), next, ref pos_e, ref h_e);
                                //Console.WriteLine($"next={next}");

                                var last_next = next;
                                while (!h_e)
                                {
                                    last_next = next;
                                    next = Process(puzzle_a, "", next, ref pos_a, ref h_a);
                                    //Console.WriteLine($"next={next}");
                                    next = Process(puzzle_b, "", next, ref pos_b, ref h_b);
                                    //Console.WriteLine($"next={next}");
                                    next = Process(puzzle_c, "", next, ref pos_c, ref h_c);
                                    //Console.WriteLine($"next={next}");
                                    next = Process(puzzle_d, "", next, ref pos_d, ref h_d);
                                    //Console.WriteLine($"next={next}");
                                    next = Process(puzzle_e, "", next, ref pos_e, ref h_e);
                                    //Console.WriteLine($"next={next}");

                                    //Console.WriteLine($"halt={h_a}/{h_b}/{h_c}/{h_d}/{h_e}");
                                }


                                //var nexti = long.Parse(next);
                                //if (max.Length < last_next.Length)
                                //    max = last_next;

                                max = Math.Max(max, Double.Parse(last_next));

                                Console.WriteLine($"canditate={last_next};max={max}");


                                //a = b = c = d = e = 10;

                            }


            //correct answer:canditate=138212;max=272368
            //correct answer:max=19741286 (for 2nd problem)


        }



        static string Process(int[] puzzle, string setting, string signal, ref int i, ref bool halted)
        {
            var cnt = 0;
            var wasset = false;
            var ret = "";
            var l = puzzle.Length;
            //var i = 0;
            while (i < l)
            {
                int opcode = puzzle[i] % 100;

                var modes = (puzzle[i] - opcode) / 100;
                var mode1 = modes % 10;
                modes = (modes - mode1) / 10;
                var mode2 = modes % 10;
                modes = (modes - mode2) / 10;
                var mode3 = modes % 10;

                if (opcode == 1)
                {
                    int poz1 = puzzle[i + 1];
                    int poz2 = puzzle[i + 2];
                    int pozr = puzzle[i + 3];

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode1");

                    puzzle[pozr] = puzzle[poz1] + puzzle[poz2];
                    i += 4;
                }
                else if (opcode == 2)
                {
                    int poz1 = puzzle[i + 1];
                    int poz2 = puzzle[i + 2];
                    int pozr = puzzle[i + 3];

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode2");

                    puzzle[pozr] = puzzle[poz1] * puzzle[poz2]; ;
                    i += 4;
                }
                else if (opcode == 3)//input
                {

                    //Console.Write("give a number:");
                    string inputs;
                    if (!wasset && !string.IsNullOrEmpty(setting))
                    {
                        inputs = setting;
                        wasset = true;
                    }
                    else
                    {
                        inputs = signal;
                        cnt++;
                        if (cnt > 1)
                        {
                            throw new Exception("extra input was not expected");
                        }
                    }


                    //var inputs = Console.ReadLine();
                    var input = int.Parse(inputs);

                    System.Console.WriteLine($"{input} was read");
                    int poz1 = puzzle[i + 1];

                    if (mode1 == 1)
                        // poz1=i+1;
                        throw new Exception("immediate cannotbe for opcode3");



                    puzzle[poz1] = input;


                    i += 2;

                }
                else if (opcode == 4)//output
                {

                    int poz1 = puzzle[i + 1];

                    if (mode1 == 1)
                        poz1 = i + 1;

                    //Console.Write(puzzle[poz1]);
                    ret += puzzle[poz1];
                    i += 2;
                    Console.WriteLine($"output {ret}");
                    return ret;

                }
                else if (opcode == 5)
                {//jump-if-true

                    int poz1 = puzzle[i + 1];
                    int pozr = puzzle[i + 2];

                    if (mode1 == 1)
                        poz1 = i + 1;

                    if (mode2 == 1)
                        pozr = i + 2;

                    if (puzzle[poz1] != 0)
                        i = puzzle[pozr];
                    else
                        i += 3;
                }
                else if (opcode == 6)
                {//jump-if-false

                    int poz1 = puzzle[i + 1];
                    int pozr = puzzle[i + 2];

                    if (mode1 == 1)
                        poz1 = i + 1;

                    if (mode2 == 1)
                        pozr = i + 2;

                    if (puzzle[poz1] == 0)
                        i = puzzle[pozr];
                    else
                        i += 3;
                }
                else if (opcode == 7)
                {//is-less-than
                    int poz1 = puzzle[i + 1];
                    int poz2 = puzzle[i + 2];
                    int pozr = puzzle[i + 3];

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode7");

                    puzzle[pozr] = puzzle[poz1] < puzzle[poz2] ? 1 : 0; ;
                    i += 4;
                }
                else if (opcode == 8)
                {//is-equal
                    int poz1 = puzzle[i + 1];
                    int poz2 = puzzle[i + 2];
                    int pozr = puzzle[i + 3];

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode8");

                    puzzle[pozr] = puzzle[poz1] == puzzle[poz2] ? 1 : 0; ;
                    i += 4;
                }
                else if (opcode == 99)
                {

                    //System.Console.WriteLine("halt");
                    //print(puzzle);
                    halted = true;
                    return ret;
                }
                else
                {
                    throw new Exception($"{i} contains unexpected opcode - {opcode}");
                }



            }
            throw new Exception($"no 99 opcode");
        }
        static void print(int[] a)
        {
            for (int i = 0; i < a.Length - 1; i++)
                Console.Write($"{a[i]},");
            Console.WriteLine(a[a.Length - 1]);
        }
    }
}

