using System;

namespace day_9 
{
    class Program
    {
        static void Main(string[] args)
        {
            //int x = 111111111111;
            //var puzzle = new int[] { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1002, 43, 69, 224, 101, -483, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 5, 224, 1, 224, 223, 223, 1101, 67, 60, 225, 1102, 5, 59, 225, 1101, 7, 16, 225, 1102, 49, 72, 225, 101, 93, 39, 224, 101, -98, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 35, 82, 225, 2, 166, 36, 224, 101, -4260, 224, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 102, 66, 48, 224, 1001, 224, -4752, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1001, 73, 20, 224, 1001, 224, -55, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1102, 18, 41, 224, 1001, 224, -738, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 68, 71, 225, 1102, 5, 66, 225, 1101, 27, 5, 225, 1101, 54, 63, 224, 1001, 224, -117, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 170, 174, 224, 101, -71, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1007, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 344, 1001, 223, 1, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 389, 101, 1, 223, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 434, 101, 1, 223, 223, 1008, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 464, 1001, 223, 1, 223, 108, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 479, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 509, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 1107, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 1108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 569, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 599, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 629, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 107, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 659, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226 };
            //var puzzle = new long[] { 109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99 };
            //var puzzle = new long[] { 1102, 34915192, 34915192, 7, 4, 7, 99, 0 };
            //var puzzle = new long[] { 104, 1125899906842624, 99 };
            var puzzle = new int[] { 1102, 34463338, 34463338, 63, 1007, 63, 34463338, 63, 1005, 63, 53, 1102, 3, 1, 1000, 109, 988, 209, 12, 9, 1000, 209, 6, 209, 3, 203, 0, 1008, 1000, 1, 63, 1005, 63, 65, 1008, 1000, 2, 63, 1005, 63, 904, 1008, 1000, 0, 63, 1005, 63, 58, 4, 25, 104, 0, 99, 4, 0, 104, 0, 99, 4, 17, 104, 0, 99, 0, 0, 1102, 1, 21, 1008, 1101, 427, 0, 1028, 1102, 23, 1, 1012, 1101, 32, 0, 1009, 1101, 37, 0, 1007, 1102, 1, 892, 1023, 1102, 27, 1, 1004, 1102, 1, 38, 1013, 1102, 1, 20, 1005, 1101, 0, 29, 1001, 1101, 0, 22, 1015, 1102, 1, 35, 1003, 1101, 0, 39, 1016, 1102, 34, 1, 1011, 1101, 899, 0, 1022, 1102, 195, 1, 1024, 1101, 36, 0, 1014, 1101, 0, 24, 1000, 1102, 1, 31, 1006, 1101, 0, 28, 1017, 1101, 422, 0, 1029, 1102, 1, 33, 1019, 1102, 1, 26, 1018, 1102, 1, 0, 1020, 1102, 25, 1, 1002, 1102, 712, 1, 1027, 1101, 0, 190, 1025, 1101, 0, 715, 1026, 1102, 1, 1, 1021, 1101, 30, 0, 1010, 109, 30, 2105, 1, -6, 4, 187, 1106, 0, 199, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -19, 1206, 10, 211, 1106, 0, 217, 4, 205, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -13, 1202, 8, 1, 63, 1008, 63, 28, 63, 1005, 63, 241, 1001, 64, 1, 64, 1106, 0, 243, 4, 223, 1002, 64, 2, 64, 109, 8, 1201, -2, 0, 63, 1008, 63, 29, 63, 1005, 63, 263, 1105, 1, 269, 4, 249, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -9, 2101, 0, 3, 63, 1008, 63, 24, 63, 1005, 63, 295, 4, 275, 1001, 64, 1, 64, 1106, 0, 295, 1002, 64, 2, 64, 109, 12, 2107, 31, 0, 63, 1005, 63, 317, 4, 301, 1001, 64, 1, 64, 1106, 0, 317, 1002, 64, 2, 64, 109, 7, 21101, 40, 0, 0, 1008, 1016, 43, 63, 1005, 63, 341, 1001, 64, 1, 64, 1106, 0, 343, 4, 323, 1002, 64, 2, 64, 109, -14, 1208, -1, 31, 63, 1005, 63, 363, 1001, 64, 1, 64, 1106, 0, 365, 4, 349, 1002, 64, 2, 64, 109, 9, 1208, -6, 20, 63, 1005, 63, 387, 4, 371, 1001, 64, 1, 64, 1105, 1, 387, 1002, 64, 2, 64, 109, 2, 2102, 1, -7, 63, 1008, 63, 31, 63, 1005, 63, 413, 4, 393, 1001, 64, 1, 64, 1106, 0, 413, 1002, 64, 2, 64, 109, 21, 2106, 0, -6, 4, 419, 1106, 0, 431, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -25, 2108, 35, -6, 63, 1005, 63, 449, 4, 437, 1106, 0, 453, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 3, 21107, 41, 42, 0, 1005, 1012, 471, 4, 459, 1105, 1, 475, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 7, 21108, 42, 39, -2, 1005, 1017, 495, 1001, 64, 1, 64, 1105, 1, 497, 4, 481, 1002, 64, 2, 64, 109, -8, 1206, 9, 515, 4, 503, 1001, 64, 1, 64, 1106, 0, 515, 1002, 64, 2, 64, 109, 4, 1205, 6, 529, 4, 521, 1105, 1, 533, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -8, 2107, 26, -5, 63, 1005, 63, 553, 1001, 64, 1, 64, 1106, 0, 555, 4, 539, 1002, 64, 2, 64, 109, -6, 2102, 1, 1, 63, 1008, 63, 26, 63, 1005, 63, 575, 1105, 1, 581, 4, 561, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 10, 2101, 0, -8, 63, 1008, 63, 37, 63, 1005, 63, 601, 1105, 1, 607, 4, 587, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -19, 1207, 8, 23, 63, 1005, 63, 627, 1001, 64, 1, 64, 1106, 0, 629, 4, 613, 1002, 64, 2, 64, 109, 18, 21101, 43, 0, 3, 1008, 1013, 43, 63, 1005, 63, 655, 4, 635, 1001, 64, 1, 64, 1106, 0, 655, 1002, 64, 2, 64, 109, -16, 1207, 6, 25, 63, 1005, 63, 677, 4, 661, 1001, 64, 1, 64, 1106, 0, 677, 1002, 64, 2, 64, 109, 25, 21102, 44, 1, -4, 1008, 1015, 44, 63, 1005, 63, 703, 4, 683, 1001, 64, 1, 64, 1106, 0, 703, 1002, 64, 2, 64, 109, 17, 2106, 0, -9, 1106, 0, 721, 4, 709, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -16, 1205, 0, 737, 1001, 64, 1, 64, 1105, 1, 739, 4, 727, 1002, 64, 2, 64, 109, -12, 21107, 45, 44, 5, 1005, 1013, 759, 1001, 64, 1, 64, 1106, 0, 761, 4, 745, 1002, 64, 2, 64, 109, 4, 1201, -8, 0, 63, 1008, 63, 27, 63, 1005, 63, 783, 4, 767, 1106, 0, 787, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -16, 2108, 25, 4, 63, 1005, 63, 803, 1105, 1, 809, 4, 793, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 27, 21102, 46, 1, -5, 1008, 1018, 43, 63, 1005, 63, 829, 1106, 0, 835, 4, 815, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -27, 1202, 8, 1, 63, 1008, 63, 27, 63, 1005, 63, 857, 4, 841, 1105, 1, 861, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 23, 21108, 47, 47, -2, 1005, 1017, 883, 4, 867, 1001, 64, 1, 64, 1106, 0, 883, 1002, 64, 2, 64, 109, -1, 2105, 1, 5, 1001, 64, 1, 64, 1106, 0, 901, 4, 889, 4, 64, 99, 21102, 1, 27, 1, 21102, 915, 1, 0, 1105, 1, 922, 21201, 1, 29589, 1, 204, 1, 99, 109, 3, 1207, -2, 3, 63, 1005, 63, 964, 21201, -2, -1, 1, 21102, 1, 942, 0, 1106, 0, 922, 21202, 1, 1, -1, 21201, -2, -3, 1, 21102, 957, 1, 0, 1105, 1, 922, 22201, 1, -1, -2, 1106, 0, 968, 21202, -2, 1, -2, 109, -3, 2106, 0, 0 };
            var memory = new long[1000000];
            puzzle.CopyTo(memory, 0);
            //Console.WriteLine(ret2);
            // var puzzle=new int[]{3,225,1,225,6,6,1100,1,238,225,104,0,1002,43,69,224,101,-483,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,67,60,225,1102,5,59,225,1101,7,16,225,1102,49,72,225,101,93,39,224,101,-98,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1102,35,82,225,2,166,36,224,101,-4260,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,102,66,48,224,1001,224,-4752,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,73,20,224,1001,224,-55,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1102,18,41,224,1001,224,-738,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1101,68,71,225,1102,5,66,225,1101,27,5,225,1101,54,63,224,1001,224,-117,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,170,174,224,101,-71,224,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,677,224,102,2,223,223,1006,224,344,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226};
            // Process(new int[]{1101,100,-1,4,09});
            // Process(new int[]{2,3,0,3,99});
            // Process(new int[]{2,4,4,5,99,0});
            // Process(new int[]{1,1,1,4,99,5,6,0,99});
            // Process(new int[]{1,9,10,3,2,3,11,0,99,30,40,50});
            // System.Console.WriteLine("less than 8");
            // Process(new int[]{3,9,7,9,10,9,4,9,99,-1,8});
            // System.Console.WriteLine("less than 8 immediate");
            // Process(new int[]{3,3,1107,-1,8,3,4,3,99});
            //  System.Console.WriteLine("equal 8 immediate");
            // Process(new int[]{3,3,1108,-1,8,3,4,3,99});           
            //  System.Console.WriteLine("jump tests position");
            // Process(new int[]{3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9}); 
            // System.Console.WriteLine("jump tests immediate");
            // Process(new int[]{3,3,1105,-1,9,1101,0,0,12,4,12,99,1}); 
            //             System.Console.WriteLine("larger (lt 8, eq 8, gt 8");
            //             Process(new int[]{3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
            // 1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
            // 999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99}); 
            Process(memory);//50894 for second (input=2); 2738720997 for first (input=1)
        }

        static void Process(long[] puzzle)
        {
            long currentrel = 0;
            long l = puzzle.Length;
            long i = 0;

            while (i < l)
            {
                //Console.WriteLine(i);
                puzzle.print(100, 16);
                long opcode = puzzle[i] % 100;
                //Console.WriteLine(currentrel);

                var modes = (puzzle[i] - opcode) / 100;
                var mode1 = modes % 10;
                modes = (modes - mode1) / 10;
                var mode2 = modes % 10;
                modes = (modes - mode2) / 10;
                var mode3 = modes % 10;

                long rel1 = 0;
                if (mode1 == 2)
                    rel1 = currentrel;
                long rel2 = 0;
                if (mode2 == 2)
                    rel2 = currentrel;
                long rel3 = 0;
                if (mode3 == 2)
                    rel3 = currentrel;

                if (opcode == 1)
                {
                    long poz1 = puzzle[i + 1] + rel1;
                    long poz2 = puzzle[i + 2] + rel2;
                    long pozr = puzzle[i + 3] + rel3;

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode1");

                    puzzle[pozr] = puzzle[poz1] + puzzle[poz2];
                    i += 4;
                }
                else if (opcode == 2)
                {
                    long poz1 = puzzle[i + 1] + rel1;
                    long poz2 = puzzle[i + 2] + rel2;
                    long pozr = puzzle[i + 3] + rel3;

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode2");

                    puzzle[pozr] = puzzle[poz1] * puzzle[poz2]; ;
                    i += 4;
                }
                else if (opcode == 3)
                {

                    Console.Write("give a number:");
                    var inputs = Console.ReadLine();
                    var input = int.Parse(inputs);
                    System.Console.WriteLine($"{input} was read");
                    long poz1 = puzzle[i + 1] + rel1;

                    if (mode1 == 1)
                        // poz1=i+1;
                        throw new Exception("immediate cannotbe for opcode3");



                    puzzle[poz1] = input;


                    i += 2;

                }
                else if (opcode == 4)
                {

                    long poz1 = puzzle[i + 1] + rel1;

                    if (mode1 == 1)
                        poz1 = i + 1;

                    Console.Write(puzzle[poz1] + "-");

                    i += 2;
                }
                else if (opcode == 5)
                {//jump-if-true

                    long poz1 = puzzle[i + 1] + rel1;
                    long pozr = puzzle[i + 2] + rel2;

                    if (mode1 == 1)
                        poz1 = i + 1;

                    if (mode2 == 1)
                        pozr = i + 2;

                    if (puzzle[poz1] != 0)
                        i = puzzle[pozr];
                    else
                        i += 3;
                }
                else if (opcode == 6)
                {//jump-if-false

                    long poz1 = puzzle[i + 1] + rel1;
                    long pozr = puzzle[i + 2] + rel2;

                    if (mode1 == 1)
                        poz1 = i + 1;

                    if (mode2 == 1)
                        pozr = i + 2;

                    if (puzzle[poz1] == 0)
                        i = puzzle[pozr];
                    else
                        i += 3;
                }
                else if (opcode == 7)
                {//is-less-than
                    long poz1 = puzzle[i + 1] + rel1;
                    long poz2 = puzzle[i + 2] + rel2;
                    long pozr = puzzle[i + 3] + rel3;

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode7");

                    puzzle[pozr] = puzzle[poz1] < puzzle[poz2] ? 1 : 0; ;
                    i += 4;
                }
                else if (opcode == 8)
                {//is-equal
                    long poz1 = puzzle[i + 1] + rel1;
                    long poz2 = puzzle[i + 2] + rel2;
                    long pozr = puzzle[i + 3] + rel3;

                    if (mode1 == 1)
                        poz1 = i + 1;
                    if (mode2 == 1)
                        poz2 = i + 2;
                    if (mode3 == 1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode8");

                    puzzle[pozr] = puzzle[poz1] == puzzle[poz2] ? 1 : 0; ;
                    i += 4;

                }
                else if (opcode == 9)//set rel
                {

                    long poz1 = puzzle[i + 1] + rel1;

                    if (mode1 == 1)
                        poz1 = i + 1;

                    currentrel += puzzle[poz1];

                    i += 2;
                }
                else if (opcode == 99)
                {

                    System.Console.WriteLine($"halt at {i}");
                    //i = 0;
                    //currentrel = 0;
                    //i++;
                    return;
                }
                else
                {
                    System.Console.WriteLine($"{i} contains unexpected opcode - {opcode}");
                    return;
                }

            }
        }
        static void print(int[] a)
        {
            for (int i = 0; i < a.Length - 1; i++)
                Console.Write($"{a[i]},");
            Console.WriteLine(a[a.Length - 1]);
        }

    }
}
