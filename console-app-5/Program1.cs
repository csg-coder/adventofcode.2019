using System;

namespace console_app_5
{
    class Program1
    {
        static void Main1(string[] args)
        {
/*
2
2
2
30
3500
4484226

            var puzzleday2=new int[]{1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,6,1,19,1,5,19,23,2,6,23,27,1,27,5,31,2,9,31,35,1,5,35,39,2,6,39,43,2,6,43,47,1,5,47,51,2,9,51,55,1,5,55,59,1,10,59,63,1,63,6,67,1,9,67,71,1,71,6,75,1,75,13,79,2,79,13,83,2,9,83,87,1,87,5,91,1,9,91,95,2,10,95,99,1,5,99,103,1,103,9,107,1,13,107,111,2,111,10,115,1,115,5,119,2,13,119,123,1,9,123,127,1,5,127,131,2,131,6,135,1,135,5,139,1,139,6,143,1,143,6,147,1,2,147,151,1,151,5,0,99,2,14,0,0};
            Process(new int[]{1,0,0,0,99});
            Process(new int[]{2,3,0,3,99});
            Process(new int[]{2,4,4,5,99,0});
            Process(new int[]{1,1,1,4,99,5,6,0,99});
            Process(new int[]{1,9,10,3,2,3,11,0,99,30,40,50});
            Process(puzzleday2);
*/
            var puzzle=new int[]{3,225,1,225,6,6,1100,1,238,225,104,0,1002,43,69,224,101,-483,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,67,60,225,1102,5,59,225,1101,7,16,225,1102,49,72,225,101,93,39,224,101,-98,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1102,35,82,225,2,166,36,224,101,-4260,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,102,66,48,224,1001,224,-4752,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,73,20,224,1001,224,-55,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1102,18,41,224,1001,224,-738,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1101,68,71,225,1102,5,66,225,1101,27,5,225,1101,54,63,224,1001,224,-117,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,170,174,224,101,-71,224,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,677,224,102,2,223,223,1006,224,344,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226};
            Process(new int[]{1101,100,-1,4,09});
            Process(new int[]{2,3,0,3,99});
            Process(new int[]{2,4,4,5,99,0});
            Process(new int[]{1,1,1,4,99,5,6,0,99});
            Process(new int[]{1,9,10,3,2,3,11,0,99,30,40,50});
            Process(puzzle);
        }

        static void Process(int[] puzzle){
            var l=puzzle.Length;
            var i=0;
            while(i<l){
                int opcode=puzzle[i]%100;

                var modes=(puzzle[i]-opcode)/100;
                var mode1=modes%10;
                modes=(modes-mode1)/10;
                var mode2=modes%10;
                modes=(modes-mode2)/10; 
                var mode3=modes%10;

                if(opcode==1){
                    int poz1=puzzle[i+1];
                    int poz2=puzzle[i+2];
                    int pozr=puzzle[i+3];

                    if(mode1==1)
                        poz1=i+1;
                    if(mode2==1)
                        poz2=i+2;
                    if(mode3==1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode1");

                    puzzle[pozr]=puzzle[poz1]+puzzle[poz2];
                    i+=4;
                }else if(opcode==2){
                    int poz1=puzzle[i+1];
                    int poz2=puzzle[i+2];
                    int pozr=puzzle[i+3];

                    if(mode1==1)
                        poz1=i+1;
                    if(mode2==1)
                        poz2=i+2;
                    if(mode3==1)
                        // pozr=i+3;
                        throw new Exception("immediate cannotbe for opcode2");

                    puzzle[pozr]=puzzle[poz1]*puzzle[poz2];;
                    i+=4;
                }else if(opcode==3){

                    Console.Write("give a number:");
                    var inputs = Console.ReadLine();
                    var input=int.Parse(inputs);
                    System.Console.WriteLine($"{input} was read");
                    int poz1=puzzle[i+1];
                    
                    if(mode1==1)
                        // poz1=i+1;
                        throw new Exception("immediate cannotbe for opcode3");

                    

                    puzzle[poz1]=input;


                    i+=2;

                }else if(opcode==4){

                    int poz1=puzzle[i+1];
                    
                    if(mode1==1)
                        poz1=i+1;

                    Console.Write(puzzle[poz1]);

                    i+=2;
                }else if(opcode==99){
                    System.Console.WriteLine("halt");
                    print(puzzle);
                    return;
                }else{
                    System.Console.WriteLine($"{i} contains unexpected opcode - {opcode}");
                    return;
                }
               
            }
        }
        static void print(int[] a){
            for(int i=0;i<a.Length-1;i++)
                Console.Write($"{a[i]},");
            Console.WriteLine(a[a.Length-1]);
        }
        static void Process_day2(int[] puzzle){
            var l=puzzle.Length;
            var i=0;
            while(i<l){
                if(puzzle[i]==1){
                    puzzle[puzzle[i+3]]=puzzle[puzzle[i+1]]+puzzle[puzzle[i+2]];
                }else if(puzzle[i]==2){
                    puzzle[puzzle[i+3]]=puzzle[puzzle[i+1]]*puzzle[puzzle[i+2]];
                }else if(puzzle[i]==99){
                    System.Console.WriteLine(puzzle[0]);
                    return;
                }else{
                    System.Console.WriteLine($"{i} contains unexpected opcode");
                    return;
                }
                i+=4;
            }
        }
    }
}
